# Advanced ESP Early Failure Detection Fuzzy Logic #
# Created by: AST AI Team (Ari, Chairul, Ramdhan, Dedi Wilantara, Monas) #
# April 2019 #
import matplotlib.pyplot as plt
import cx_Oracle
import pandas as pd
import numpy as np
import skfuzzy as fuzz
#connection = cx_Oracle.connect('cict', 'cictdmw399#', 'DMW3RKND')
connection = cx_Oracle.connect('IODSC_DM' , 'XMudqvGvApoKw#2','DMW3RKND')
# Pump info 1 #
sql1 = "Select temp1.UWI,\
       temp1.grid_name,\
       temp1.field,\
       temp1.status,\
       (sysdate - temp1.install_date) RUN_LIFE,\
       temp1.pump_info,\
       temp1.pump_stages,\
       temp1.motor_hp,\
       temp1.design_rate,\
       temp1.pump_depth \
  from (select * from slo.well_last_data a where a.status in ('ON', 'OFF')) temp1"
# Pump info 2 #
sql2 = "Select temp2.UWI,\
       temp2.grid_name,\
       avg(temp2.BFPD) AVG_BFPDlast3test,\
       avg(temp2.water_cut_percent) AVG_WClast3test\
  from (select temp1.grid_name,temp1.UWI,\
               (temp1.oil_bopd + temp1.water_bwpd) BFPD,\
               temp1.water_cut_percent,\
               temp1.test_date,\
               b.job_end_date,\
               dense_rank() over(partition by temp1.grid_name order by temp1.test_date desc) rank\
          from (select * from slo.well_test) temp1\
          INNER join slo.well_last_data b on temp1.grid_name = b.grid_name\
         where ((B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE > B.JOB_END_DATE and TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE <= B.JOB_END_DATE and TEMP1.TEST_DATE > B.JOB_END_DATE) or (B.INSTALL_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.JOB_END_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.JOB_END_DATE))\
           and B.PROD_STRING_TYPE = 'OP'\
           and b.status in ('ON', 'OFF')) temp2\
 where temp2.rank <= 3\
 group by temp2.grid_name, temp2.UWI"
# Average BFPD Last 3 Test #
sql3 = "Select tempB.UWI,tempB.grid_name,\
       avg(tempB.BFPD) AVG_BFPDfirst3test,\
       avg(tempB.water_cut_percent) AVG_WCfirst3test\
  from (select tempA.grid_name, tempA.UWI,\
               (tempA.oil_bopd + tempA.water_bwpd) BFPD,\
               tempA.water_cut_percent,\
               tempA.test_date,\
               b.job_end_date,\
               dense_rank() over(partition by tempA.grid_name order by tempA.test_date asc) rank\
          from (select * from slo.well_test a) tempA\
          INNER join slo.well_last_data b on tempA.grid_name = b.grid_name\
         where ((B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE > B.JOB_END_DATE and TEMPA.TEST_DATE > B.INSTALL_DATE) or (B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE <= B.JOB_END_DATE and TEMPA.TEST_DATE > B.JOB_END_DATE) or (B.INSTALL_DATE IS NOT NULL AND TEMPA.TEST_DATE > B.INSTALL_DATE) or (B.JOB_END_DATE IS NOT NULL AND TEMPA.TEST_DATE > B.JOB_END_DATE))\
           and B.PROD_STRING_TYPE = 'OP'\
	   and b.status in ('ON', 'OFF')) tempB\
 where tempB.rank <= 3\
 group by tempB.grid_name,tempB.UWI"
# 30 Days Sonolog (WFL)#
sql4 = "SELECT TEMP1.UWI, TEMP1.GRID_NAME,\
       REGR_SLOPE(TEMP1.WORKING_FLUID_LVL, TEMP1.TEST_DATE - SYSDATE) SLOPE_WFL_30_DAYS,\
       REGR_INTERCEPT(TEMP1.WORKING_FLUID_LVL, TEMP1.TEST_DATE - SYSDATE) INTERCEPT_WFL,\
       REGR_COUNT(TEMP1.WORKING_FLUID_LVL, TEMP1.TEST_DATE - SYSDATE) NUMBER_OF_DATA_WFL,\
       REGR_R2(TEMP1.WORKING_FLUID_LVL, TEMP1.TEST_DATE - SYSDATE) RSQ_WFL\
  FROM (SELECT *\
          FROM SLO.MISC_TEST_SONOLOG A\
         ORDER BY A.GRID_NAME, A.UWI, A.TEST_DATE ASC) TEMP1\
  INNER JOIN SLO.WELL_LAST_DATA B ON TEMP1.GRID_NAME = B.GRID_NAME\
 WHERE SYSDATE - TEMP1.TEST_DATE <= 30 and ((B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE > B.JOB_END_DATE and TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE <= B.JOB_END_DATE and TEMP1.TEST_DATE > B.JOB_END_DATE) or (B.INSTALL_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.JOB_END_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.JOB_END_DATE))\
   AND B.PROD_STRING_TYPE = 'OP'\
   AND B.STATUS IN ('ON', 'OFF')\
 GROUP BY TEMP1.GRID_NAME, TEMP1.UWI\
 ORDER BY TEMP1.GRID_NAME ASC"
# 60 Days Sonolog (WFL)#
sql5 = "SELECT TEMP1.UWI, TEMP1.GRID_NAME,\
       REGR_SLOPE(TEMP1.WORKING_FLUID_LVL, TEMP1.TEST_DATE - SYSDATE) SLOPE_WFL_60_DAYS,\
       REGR_INTERCEPT(TEMP1.WORKING_FLUID_LVL, TEMP1.TEST_DATE - SYSDATE) INTERCEPT_WFL,\
       REGR_COUNT(TEMP1.WORKING_FLUID_LVL, TEMP1.TEST_DATE - SYSDATE) NUMBER_OF_DATA_WFL,\
       REGR_R2(TEMP1.WORKING_FLUID_LVL, TEMP1.TEST_DATE - SYSDATE) RSQ_WFL\
  FROM (SELECT *\
          FROM SLO.MISC_TEST_SONOLOG A\
         ORDER BY A.GRID_NAME, A.UWI, A.TEST_DATE ASC) TEMP1\
  INNER JOIN SLO.WELL_LAST_DATA B ON TEMP1.GRID_NAME = B.GRID_NAME\
 WHERE SYSDATE - TEMP1.TEST_DATE <= 60 and ((B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE > B.JOB_END_DATE and TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE <= B.JOB_END_DATE and TEMP1.TEST_DATE > B.JOB_END_DATE) or (B.INSTALL_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.JOB_END_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.JOB_END_DATE))\
   AND B.PROD_STRING_TYPE = 'OP'\
   AND B.STATUS IN ('ON', 'OFF')\
 GROUP BY TEMP1.GRID_NAME, TEMP1.UWI\
 ORDER BY TEMP1.GRID_NAME ASC"
# 90 Days Sonolog (WFL)#
sql6 = "SELECT TEMP1.UWI, TEMP1.GRID_NAME,\
       REGR_SLOPE(TEMP1.WORKING_FLUID_LVL, TEMP1.TEST_DATE - SYSDATE) SLOPE_WFL_90_DAYS,\
       REGR_INTERCEPT(TEMP1.WORKING_FLUID_LVL, TEMP1.TEST_DATE - SYSDATE) INTERCEPT_WFL,\
       REGR_COUNT(TEMP1.WORKING_FLUID_LVL, TEMP1.TEST_DATE - SYSDATE) NUMBER_OF_DATA_WFL,\
       REGR_R2(TEMP1.WORKING_FLUID_LVL, TEMP1.TEST_DATE - SYSDATE) RSQ_WFL\
  FROM (SELECT * FROM SLO.MISC_TEST_SONOLOG A \
         ORDER BY A.GRID_NAME, A.TEST_DATE,A.UWI ASC) TEMP1\
  INNER JOIN SLO.WELL_LAST_DATA B ON TEMP1.GRID_NAME = B.GRID_NAME\
 WHERE SYSDATE - TEMP1.TEST_DATE <= 90 and ((B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE > B.JOB_END_DATE and TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE <= B.JOB_END_DATE and TEMP1.TEST_DATE > B.JOB_END_DATE) or (B.INSTALL_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.JOB_END_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.JOB_END_DATE))\
   AND B.PROD_STRING_TYPE = 'OP'\
   AND B.STATUS IN ('ON', 'OFF')\
 GROUP BY TEMP1.GRID_NAME, TEMP1.UWI\
 ORDER BY TEMP1.GRID_NAME ASC"
# 180 Days Sonolog (WFL)#
sql7 = "SELECT TEMP1.UWI, TEMP1.GRID_NAME,\
       REGR_SLOPE(TEMP1.WORKING_FLUID_LVL, TEMP1.TEST_DATE - SYSDATE) SLOPE_WFL_180_DAYS,\
       REGR_INTERCEPT(TEMP1.WORKING_FLUID_LVL, TEMP1.TEST_DATE - SYSDATE) INTERCEPT_WFL,\
       REGR_COUNT(TEMP1.WORKING_FLUID_LVL, TEMP1.TEST_DATE - SYSDATE) NUMBER_OF_DATA_WFL,\
       REGR_R2(TEMP1.WORKING_FLUID_LVL, TEMP1.TEST_DATE - SYSDATE) RSQ_WFL\
  FROM (SELECT * FROM SLO.MISC_TEST_SONOLOG A\
         ORDER BY A.GRID_NAME, A.TEST_DATE, A.UWI ASC) TEMP1\
  INNER JOIN SLO.WELL_LAST_DATA B ON TEMP1.GRID_NAME = B.GRID_NAME\
 WHERE SYSDATE - TEMP1.TEST_DATE <= 180 and ((B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE > B.JOB_END_DATE and TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE <= B.JOB_END_DATE and TEMP1.TEST_DATE > B.JOB_END_DATE) or (B.INSTALL_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.JOB_END_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.JOB_END_DATE))\
   AND B.PROD_STRING_TYPE = 'OP'\
   AND B.STATUS IN ('ON', 'OFF')\
 GROUP BY TEMP1.GRID_NAME, TEMP1.UWI\
 ORDER BY TEMP1.GRID_NAME ASC"
# Last PIS Sonolog (WFL)#
sql8 = "SELECT TEMP1.UWI, TEMP1.GRID_NAME,\
       REGR_SLOPE(TEMP1.WORKING_FLUID_LVL, TEMP1.TEST_DATE - SYSDATE) SLOPE_WFL_LAST_PIS,\
       REGR_INTERCEPT(TEMP1.WORKING_FLUID_LVL, TEMP1.TEST_DATE - SYSDATE) INTERCEPT_WFL,\
       REGR_COUNT(TEMP1.WORKING_FLUID_LVL, TEMP1.TEST_DATE - SYSDATE) NUMBER_OF_TOTAL_DATA_WFL,\
       REGR_R2(TEMP1.WORKING_FLUID_LVL, TEMP1.TEST_DATE - SYSDATE) RSQ_WFL\
  FROM (SELECT * FROM SLO.MISC_TEST_SONOLOG A\
         ORDER BY A.GRID_NAME, A.TEST_DATE, A.UWI ASC) TEMP1\
  INNER JOIN SLO.WELL_LAST_DATA B ON TEMP1.GRID_NAME = B.GRID_NAME\
 WHERE TEMP1.TEST_DATE <= SYSDATE and ((B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE > B.JOB_END_DATE and TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE <= B.JOB_END_DATE and TEMP1.TEST_DATE > B.JOB_END_DATE) or (B.INSTALL_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.JOB_END_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.JOB_END_DATE))\
   AND B.PROD_STRING_TYPE = 'OP'\
   AND B.STATUS IN ('ON', 'OFF')\
 GROUP BY TEMP1.GRID_NAME, TEMP1.UWI\
 ORDER BY TEMP1.GRID_NAME ASC"
##########################
# 30 Days Welltest (BFPD)#
sql9 = "SELECT X.UWI,\
       X.GRID_NAME,\
       REGR_SLOPE(X.NORM_BFPD, (X.TEST_DATE - SYSDATE)) SLOPE_BFPD_30_DAYS,\
       REGR_INTERCEPT(X.NORM_BFPD, (X.TEST_DATE - SYSDATE)) INTERCEPT_BFPD,\
       REGR_COUNT(X.NORM_BFPD, (X.TEST_DATE - SYSDATE)) NUMBER_OF_DATA_BFPD,\
       REGR_R2(X.NORM_BFPD, (X.TEST_DATE - SYSDATE)) RSQ_BFPD,\
       REGR_SLOPE(X.AMPERE_READING, X.TEST_DATE - SYSDATE) SLOPE_AMP_30_DAYS,\
       REGR_INTERCEPT(X.AMPERE_READING, X.TEST_DATE - SYSDATE) INTERCEPT_AMP,\
       REGR_COUNT(X.AMPERE_READING, X.TEST_DATE - SYSDATE) NUMBER_OF_DATA_AMP,\
       REGR_R2(X.AMPERE_READING, X.TEST_DATE - SYSDATE) RSQ_AMP\
  FROM (SELECT D.*,\
               F.MAX_BFPD,\
               CASE\
                 WHEN F.MAX_BFPD = 0 THEN\
                  0\
                 ELSE\
                  (D.BFPD - 0) / (F.MAX_BFPD - 0)\
               END NORM_BFPD\
          FROM (SELECT TEMP1.UWI,\
                       TEMP1.GRID_NAME,\
                       (TEMP1.WATER_BWPD + TEMP1.OIL_BOPD) BFPD,\
                       TEMP1.TEST_DATE,\
                       TEMP1.AMPERE_READING\
                  FROM (SELECT A.*\
                          FROM SLO.WELL_TEST A\
                         ORDER BY A.GRID_NAME, A.TEST_DATE, A.UWI ASC) TEMP1\
                  INNER JOIN SLO.WELL_LAST_DATA B\
                    ON TEMP1.UWI = B.UWI\
                 WHERE SYSDATE - TEMP1.TEST_DATE <= 30 and ((B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE > B.JOB_END_DATE and TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE <= B.JOB_END_DATE and TEMP1.TEST_DATE > B.JOB_END_DATE) or (B.INSTALL_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.JOB_END_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.JOB_END_DATE))\
                   AND B.PROD_STRING_TYPE = 'OP'\
                   AND B.STATUS IN ('ON', 'OFF')\
                 ORDER BY TEMP1.GRID_NAME ASC) D\
          LEFT JOIN (SELECT E.UWI, MAX(E.BFPD) MAX_BFPD\
                      FROM (SELECT TEMP1.UWI,\
                                   TEMP1.GRID_NAME,\
                                   (TEMP1.WATER_BWPD + TEMP1.OIL_BOPD) BFPD,\
                                   TEMP1.TEST_DATE,\
                                   TEMP1.AMPERE_READING\
                              FROM (SELECT A.*\
                                      FROM SLO.WELL_TEST A\
                                     ORDER BY A.GRID_NAME,\
                                              A.TEST_DATE,\
                                              A.UWI ASC) TEMP1\
                              INNER JOIN SLO.WELL_LAST_DATA B\
                                ON TEMP1.UWI = B.UWI\
                             WHERE SYSDATE - TEMP1.TEST_DATE <= 30 and ((B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE > B.JOB_END_DATE and TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE <= B.JOB_END_DATE and TEMP1.TEST_DATE > B.JOB_END_DATE) or (B.INSTALL_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.JOB_END_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.JOB_END_DATE))\
                               AND B.PROD_STRING_TYPE = 'OP'\
                               AND B.STATUS IN ('ON', 'OFF')\
                             ORDER BY TEMP1.GRID_NAME ASC) E\
                     GROUP BY E.UWI) F\
            ON D.UWI = F.UWI) X\
 GROUP BY X.GRID_NAME, X.UWI\
 ORDER BY X.GRID_NAME ASC\
"
# 60 Days Welltest (BFPD)#
sql10 = "SELECT X.UWI,\
       X.GRID_NAME,\
       REGR_SLOPE(X.NORM_BFPD, (X.TEST_DATE - SYSDATE)) SLOPE_BFPD_60_DAYS,\
       REGR_INTERCEPT(X.NORM_BFPD, (X.TEST_DATE - SYSDATE)) INTERCEPT_BFPD,\
       REGR_COUNT(X.NORM_BFPD, (X.TEST_DATE - SYSDATE)) NUMBER_OF_DATA_BFPD,\
       REGR_R2(X.NORM_BFPD, (X.TEST_DATE - SYSDATE)) RSQ_BFPD,\
       REGR_SLOPE(X.AMPERE_READING, X.TEST_DATE - SYSDATE) SLOPE_AMP_60_DAYS,\
       REGR_INTERCEPT(X.AMPERE_READING, X.TEST_DATE - SYSDATE) INTERCEPT_AMP,\
       REGR_COUNT(X.AMPERE_READING, X.TEST_DATE - SYSDATE) NUMBER_OF_DATA_AMP,\
       REGR_R2(X.AMPERE_READING, X.TEST_DATE - SYSDATE) RSQ_AMP\
  FROM (SELECT D.*,\
               F.MAX_BFPD,\
               CASE\
                 WHEN F.MAX_BFPD = 0 THEN\
                  0\
                 ELSE\
                  (D.BFPD - 0) / (F.MAX_BFPD - 0)\
               END NORM_BFPD\
          FROM (SELECT TEMP1.UWI,\
                       TEMP1.GRID_NAME,\
                       (TEMP1.WATER_BWPD + TEMP1.OIL_BOPD) BFPD,\
                       TEMP1.TEST_DATE,\
                       TEMP1.AMPERE_READING\
                  FROM (SELECT A.*\
                          FROM SLO.WELL_TEST A\
                         ORDER BY A.GRID_NAME, A.TEST_DATE, A.UWI ASC) TEMP1\
                  INNER JOIN SLO.WELL_LAST_DATA B\
                    ON TEMP1.UWI = B.UWI\
                 WHERE SYSDATE - TEMP1.TEST_DATE <= 60 and ((B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE > B.JOB_END_DATE and TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE <= B.JOB_END_DATE and TEMP1.TEST_DATE > B.JOB_END_DATE) or (B.INSTALL_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.JOB_END_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.JOB_END_DATE))\
                   AND B.PROD_STRING_TYPE = 'OP'\
                   AND B.STATUS IN ('ON', 'OFF')\
                 ORDER BY TEMP1.GRID_NAME ASC) D\
          LEFT JOIN (SELECT E.UWI, MAX(E.BFPD) MAX_BFPD\
                      FROM (SELECT TEMP1.UWI,\
                                   TEMP1.GRID_NAME,\
                                   (TEMP1.WATER_BWPD + TEMP1.OIL_BOPD) BFPD,\
                                   TEMP1.TEST_DATE,\
                                   TEMP1.AMPERE_READING\
                              FROM (SELECT A.*\
                                      FROM SLO.WELL_TEST A\
                                     ORDER BY A.GRID_NAME,\
                                              A.TEST_DATE,\
                                              A.UWI ASC) TEMP1\
                              INNER JOIN SLO.WELL_LAST_DATA B\
                                ON TEMP1.UWI = B.UWI\
                             WHERE SYSDATE - TEMP1.TEST_DATE <= 60 and ((B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE > B.JOB_END_DATE and TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE <= B.JOB_END_DATE and TEMP1.TEST_DATE > B.JOB_END_DATE) or (B.INSTALL_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.JOB_END_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.JOB_END_DATE))\
                               AND B.PROD_STRING_TYPE = 'OP'\
                               AND B.STATUS IN ('ON', 'OFF')\
                             ORDER BY TEMP1.GRID_NAME ASC) E\
                     GROUP BY E.UWI) F\
            ON D.UWI = F.UWI) X\
 GROUP BY X.GRID_NAME, X.UWI\
 ORDER BY X.GRID_NAME ASC"
########
# 90 Days Welltest (BFPD)#
sql11 = "SELECT X.UWI,\
       X.GRID_NAME,\
       REGR_SLOPE(X.NORM_BFPD, (X.TEST_DATE - SYSDATE)) SLOPE_BFPD_90_DAYS,\
       REGR_INTERCEPT(X.NORM_BFPD, (X.TEST_DATE - SYSDATE)) INTERCEPT_BFPD,\
       REGR_COUNT(X.NORM_BFPD, (X.TEST_DATE - SYSDATE)) NUMBER_OF_DATA_BFPD,\
       REGR_R2(X.NORM_BFPD, (X.TEST_DATE - SYSDATE)) RSQ_BFPD,\
       REGR_SLOPE(X.AMPERE_READING, X.TEST_DATE - SYSDATE) SLOPE_AMP_90_DAYS,\
       REGR_INTERCEPT(X.AMPERE_READING, X.TEST_DATE - SYSDATE) INTERCEPT_AMP,\
       REGR_COUNT(X.AMPERE_READING, X.TEST_DATE - SYSDATE) NUMBER_OF_DATA_AMP,\
       REGR_R2(X.AMPERE_READING, X.TEST_DATE - SYSDATE) RSQ_AMP\
  FROM (SELECT D.*,\
               F.MAX_BFPD,\
               CASE\
                 WHEN F.MAX_BFPD = 0 THEN\
                  0\
                 ELSE\
                  (D.BFPD - 0) / (F.MAX_BFPD - 0)\
               END NORM_BFPD\
          FROM (SELECT TEMP1.UWI,\
                       TEMP1.GRID_NAME,\
                       (TEMP1.WATER_BWPD + TEMP1.OIL_BOPD) BFPD,\
                       TEMP1.TEST_DATE,\
                       TEMP1.AMPERE_READING\
                  FROM (SELECT A.*\
                          FROM SLO.WELL_TEST A\
                         ORDER BY A.GRID_NAME, A.TEST_DATE, A.UWI ASC) TEMP1\
                  INNER JOIN SLO.WELL_LAST_DATA B\
                    ON TEMP1.UWI = B.UWI\
                 WHERE SYSDATE - TEMP1.TEST_DATE <= 90 and ((B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE > B.JOB_END_DATE and TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE <= B.JOB_END_DATE and TEMP1.TEST_DATE > B.JOB_END_DATE) or (B.INSTALL_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.JOB_END_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.JOB_END_DATE))\
                   AND B.PROD_STRING_TYPE = 'OP'\
                   AND B.STATUS IN ('ON', 'OFF')\
                 ORDER BY TEMP1.GRID_NAME ASC) D\
          LEFT JOIN (SELECT E.UWI, MAX(E.BFPD) MAX_BFPD\
                      FROM (SELECT TEMP1.UWI,\
                                   TEMP1.GRID_NAME,\
                                   (TEMP1.WATER_BWPD + TEMP1.OIL_BOPD) BFPD,\
                                   TEMP1.TEST_DATE,\
                                   TEMP1.AMPERE_READING\
                              FROM (SELECT A.*\
                                      FROM SLO.WELL_TEST A\
                                     ORDER BY A.GRID_NAME,\
                                              A.TEST_DATE,\
                                              A.UWI ASC) TEMP1\
                              INNER JOIN SLO.WELL_LAST_DATA B\
                                ON TEMP1.UWI = B.UWI\
                             WHERE SYSDATE - TEMP1.TEST_DATE <= 90 and ((B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE > B.JOB_END_DATE and TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE <= B.JOB_END_DATE and TEMP1.TEST_DATE > B.JOB_END_DATE) or (B.INSTALL_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.JOB_END_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.JOB_END_DATE))\
                               AND B.PROD_STRING_TYPE = 'OP'\
                               AND B.STATUS IN ('ON', 'OFF')\
                             ORDER BY TEMP1.GRID_NAME ASC) E\
                     GROUP BY E.UWI) F\
            ON D.UWI = F.UWI) X\
 GROUP BY X.GRID_NAME, X.UWI\
 ORDER BY X.GRID_NAME ASC\
"
# 180 Days Welltest (BFPD)#
sql12 = "SELECT X.UWI,\
       X.GRID_NAME,\
       REGR_SLOPE(X.NORM_BFPD, (X.TEST_DATE - SYSDATE)) SLOPE_BFPD_180_DAYS,\
       REGR_INTERCEPT(X.NORM_BFPD, (X.TEST_DATE - SYSDATE)) INTERCEPT_BFPD,\
       REGR_COUNT(X.NORM_BFPD, (X.TEST_DATE - SYSDATE)) NUMBER_OF_DATA_BFPD,\
       REGR_R2(X.NORM_BFPD, (X.TEST_DATE - SYSDATE)) RSQ_BFPD,\
       REGR_SLOPE(X.AMPERE_READING, X.TEST_DATE - SYSDATE) SLOPE_AMP_180_DAYS,\
       REGR_INTERCEPT(X.AMPERE_READING, X.TEST_DATE - SYSDATE) INTERCEPT_AMP,\
       REGR_COUNT(X.AMPERE_READING, X.TEST_DATE - SYSDATE) NUMBER_OF_DATA_AMP,\
       REGR_R2(X.AMPERE_READING, X.TEST_DATE - SYSDATE) RSQ_AMP\
  FROM (SELECT D.*,\
               F.MAX_BFPD,\
               CASE\
                 WHEN F.MAX_BFPD = 0 THEN\
                  0\
                 ELSE\
                  (D.BFPD - 0) / (F.MAX_BFPD - 0)\
               END NORM_BFPD\
          FROM (SELECT TEMP1.UWI,\
                       TEMP1.GRID_NAME,\
                       (TEMP1.WATER_BWPD + TEMP1.OIL_BOPD) BFPD,\
                       TEMP1.TEST_DATE,\
                       TEMP1.AMPERE_READING\
                  FROM (SELECT A.*\
                          FROM SLO.WELL_TEST A\
                         ORDER BY A.GRID_NAME, A.TEST_DATE, A.UWI ASC) TEMP1\
                  INNER JOIN SLO.WELL_LAST_DATA B\
                    ON TEMP1.UWI = B.UWI\
                 WHERE SYSDATE - TEMP1.TEST_DATE <= 180 and ((B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE > B.JOB_END_DATE and TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE <= B.JOB_END_DATE and TEMP1.TEST_DATE > B.JOB_END_DATE) or (B.INSTALL_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.JOB_END_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.JOB_END_DATE))\
                   AND B.PROD_STRING_TYPE = 'OP'\
                   AND B.STATUS IN ('ON', 'OFF')\
                 ORDER BY TEMP1.GRID_NAME ASC) D\
          LEFT JOIN (SELECT E.UWI, MAX(E.BFPD) MAX_BFPD\
                      FROM (SELECT TEMP1.UWI,\
                                   TEMP1.GRID_NAME,\
                                   (TEMP1.WATER_BWPD + TEMP1.OIL_BOPD) BFPD,\
                                   TEMP1.TEST_DATE,\
                                   TEMP1.AMPERE_READING\
                              FROM (SELECT A.*\
                                      FROM SLO.WELL_TEST A\
                                     ORDER BY A.GRID_NAME,\
                                              A.TEST_DATE,\
                                              A.UWI ASC) TEMP1\
                              INNER JOIN SLO.WELL_LAST_DATA B\
                                ON TEMP1.UWI = B.UWI\
                             WHERE SYSDATE - TEMP1.TEST_DATE <= 180 and ((B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE > B.JOB_END_DATE and TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE <= B.JOB_END_DATE and TEMP1.TEST_DATE > B.JOB_END_DATE) or (B.INSTALL_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.JOB_END_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.JOB_END_DATE))\
                               AND B.PROD_STRING_TYPE = 'OP'\
                               AND B.STATUS IN ('ON', 'OFF')\
                             ORDER BY TEMP1.GRID_NAME ASC) E\
                     GROUP BY E.UWI) F\
            ON D.UWI = F.UWI) X\
 GROUP BY X.GRID_NAME, X.UWI\
 ORDER BY X.GRID_NAME ASC\
"
# Last PIS Welltest (BFPD)#
sql13 = "SELECT X.UWI,\
       X.GRID_NAME,\
       REGR_SLOPE(X.NORM_BFPD, (X.TEST_DATE - SYSDATE)) SLOPE_BFPD_LAST_PIS,\
       REGR_INTERCEPT(X.NORM_BFPD, (X.TEST_DATE - SYSDATE)) INTERCEPT_BFPD,\
       REGR_COUNT(X.NORM_BFPD, (X.TEST_DATE - SYSDATE)) NUMBER_OF_DATA_BFPD,\
       REGR_R2(X.NORM_BFPD, (X.TEST_DATE - SYSDATE)) RSQ_BFPD,\
       REGR_SLOPE(X.AMPERE_READING, X.TEST_DATE - SYSDATE) SLOPE_AMP_LAST_PIS,\
       REGR_INTERCEPT(X.AMPERE_READING, X.TEST_DATE - SYSDATE) INTERCEPT_AMP,\
       REGR_COUNT(X.AMPERE_READING, X.TEST_DATE - SYSDATE) NUMBER_OF_DATA_AMP,\
       REGR_R2(X.AMPERE_READING, X.TEST_DATE - SYSDATE) RSQ_AMP\
  FROM (SELECT D.*,\
               F.MAX_BFPD,\
               CASE\
                 WHEN F.MAX_BFPD = 0 THEN\
                  0\
                 ELSE\
                  (D.BFPD - 0) / (F.MAX_BFPD - 0)\
               END NORM_BFPD\
          FROM (SELECT TEMP1.UWI,\
                       TEMP1.GRID_NAME,\
                       (TEMP1.WATER_BWPD + TEMP1.OIL_BOPD) BFPD,\
                       TEMP1.TEST_DATE,\
                       TEMP1.AMPERE_READING\
                  FROM (SELECT A.*\
                          FROM SLO.WELL_TEST A\
                         ORDER BY A.GRID_NAME, A.TEST_DATE, A.UWI ASC) TEMP1\
                  INNER JOIN SLO.WELL_LAST_DATA B\
                    ON TEMP1.UWI = B.UWI\
                 WHERE TEMP1.TEST_DATE <= SYSDATE and ((B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE > B.JOB_END_DATE and TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE <= B.JOB_END_DATE and TEMP1.TEST_DATE > B.JOB_END_DATE) or (B.INSTALL_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.JOB_END_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.JOB_END_DATE))\
                   AND B.PROD_STRING_TYPE = 'OP'\
                   AND B.STATUS IN ('ON', 'OFF')\
                 ORDER BY TEMP1.GRID_NAME ASC) D\
          LEFT JOIN (SELECT E.UWI, MAX(E.BFPD) MAX_BFPD\
                      FROM (SELECT TEMP1.UWI,\
                                   TEMP1.GRID_NAME,\
                                   (TEMP1.WATER_BWPD + TEMP1.OIL_BOPD) BFPD,\
                                   TEMP1.TEST_DATE,\
                                   TEMP1.AMPERE_READING\
                              FROM (SELECT A.*\
                                      FROM SLO.WELL_TEST A\
                                     ORDER BY A.GRID_NAME,\
                                              A.TEST_DATE,\
                                              A.UWI ASC) TEMP1\
                              INNER JOIN SLO.WELL_LAST_DATA B\
                                ON TEMP1.UWI = B.UWI\
                             WHERE TEMP1.TEST_DATE <= SYSDATE and ((B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE > B.JOB_END_DATE and TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE <= B.JOB_END_DATE and TEMP1.TEST_DATE > B.JOB_END_DATE) or (B.INSTALL_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.JOB_END_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.JOB_END_DATE))\
                               AND B.PROD_STRING_TYPE = 'OP'\
                               AND B.STATUS IN ('ON', 'OFF')\
                             ORDER BY TEMP1.GRID_NAME ASC) E\
                     GROUP BY E.UWI) F\
            ON D.UWI = F.UWI) X\
 GROUP BY X.GRID_NAME, X.UWI\
 ORDER BY X.GRID_NAME ASC\
"
######
###################
# WHP 30 DAYS SLOPE #
sql14 = "select TEMP1.UWI,\
       REGR_SLOPE(TEMP1.WHP, TEMP1.DATE_OF_TEST - SYSDATE) SLOPE_WHP_30_DAYS \
  from (SELECT A.UWI,to_number(A.FLOW_PRESSURE) as WHP, A.TEST_DATE as DATE_OF_TEST \
  FROM SLO.WELL_TEST A WHERE A.TEST_RESULT_CODE = 'ACCEPTED' \
  UNION ALL \
  SELECT B.UWI, to_number(B.WELLHEAD_TUB_PRESS) as WHP,B.MISC_TEST_DATE as DATE_OF_TEST \
  FROM IODSC_DM.misc_test_ordc_survey B \
  where REGEXP_LIKE(B.WELLHEAD_TUB_PRESS,'^[[:digit:]]+$') ) TEMP1 INNER JOIN SLO.WELL_LAST_DATA X on TEMP1.UWI = X.UWI\
  WHERE TEMP1.DATE_OF_TEST > SYSDATE - 30 and ((X.INSTALL_DATE IS NOT NULL AND X.JOB_END_DATE IS NOT NULL AND X.INSTALL_DATE > X.JOB_END_DATE and TEMP1.DATE_OF_TEST > X.INSTALL_DATE) or (X.INSTALL_DATE IS NOT NULL AND X.JOB_END_DATE IS NOT NULL AND X.INSTALL_DATE <= X.JOB_END_DATE and TEMP1.DATE_OF_TEST > X.JOB_END_DATE) or (X.INSTALL_DATE IS NOT NULL AND TEMP1.DATE_OF_TEST > X.INSTALL_DATE) or (X.JOB_END_DATE IS NOT NULL AND TEMP1.DATE_OF_TEST > X.JOB_END_DATE))\
  and X.PROD_STRING_TYPE = 'OP'\
  GROUP by TEMP1.UWI \
  order by TEMP1.UWI"
# WHP 60 DAYS SLOPE #
sql15 = "select TEMP1.UWI,\
       REGR_SLOPE(TEMP1.WHP, TEMP1.DATE_OF_TEST - SYSDATE) SLOPE_WHP_60_DAYS \
  from (SELECT A.UWI,to_number(A.FLOW_PRESSURE) as WHP, A.TEST_DATE as DATE_OF_TEST \
  FROM SLO.WELL_TEST A WHERE A.TEST_RESULT_CODE = 'ACCEPTED' \
  UNION ALL \
  SELECT B.UWI, to_number(B.WELLHEAD_TUB_PRESS) as WHP,B.MISC_TEST_DATE as DATE_OF_TEST \
  FROM IODSC_DM.misc_test_ordc_survey B \
  where REGEXP_LIKE(B.WELLHEAD_TUB_PRESS,'^[[:digit:]]+$') ) TEMP1 INNER JOIN SLO.WELL_LAST_DATA X on TEMP1.UWI = X.UWI\
  WHERE TEMP1.DATE_OF_TEST > SYSDATE - 60 and ((X.INSTALL_DATE IS NOT NULL AND X.JOB_END_DATE IS NOT NULL AND X.INSTALL_DATE > X.JOB_END_DATE and TEMP1.DATE_OF_TEST > X.INSTALL_DATE) or (X.INSTALL_DATE IS NOT NULL AND X.JOB_END_DATE IS NOT NULL AND X.INSTALL_DATE <= X.JOB_END_DATE and TEMP1.DATE_OF_TEST > X.JOB_END_DATE) or (X.INSTALL_DATE IS NOT NULL AND TEMP1.DATE_OF_TEST > X.INSTALL_DATE) or (X.JOB_END_DATE IS NOT NULL AND TEMP1.DATE_OF_TEST > X.JOB_END_DATE))\
  and X.PROD_STRING_TYPE = 'OP'\
  GROUP by TEMP1.UWI \
  order by TEMP1.UWI"
# WHP 90 DAYS SLOPE #
sql16 = "select TEMP1.UWI,\
       REGR_SLOPE(TEMP1.WHP, TEMP1.DATE_OF_TEST - SYSDATE) SLOPE_WHP_90_DAYS \
  from (SELECT A.UWI,to_number(A.FLOW_PRESSURE) as WHP, A.TEST_DATE as DATE_OF_TEST \
  FROM SLO.WELL_TEST A WHERE A.TEST_RESULT_CODE = 'ACCEPTED' \
  UNION ALL \
  SELECT B.UWI, to_number(B.WELLHEAD_TUB_PRESS) as WHP,B.MISC_TEST_DATE as DATE_OF_TEST \
  FROM IODSC_DM.misc_test_ordc_survey B \
  where REGEXP_LIKE(B.WELLHEAD_TUB_PRESS,'^[[:digit:]]+$')) TEMP1 INNER JOIN SLO.WELL_LAST_DATA X on TEMP1.UWI = X.UWI\
  WHERE TEMP1.DATE_OF_TEST > SYSDATE - 90 and ((X.INSTALL_DATE IS NOT NULL AND X.JOB_END_DATE IS NOT NULL AND X.INSTALL_DATE > X.JOB_END_DATE and TEMP1.DATE_OF_TEST > X.INSTALL_DATE) or (X.INSTALL_DATE IS NOT NULL AND X.JOB_END_DATE IS NOT NULL AND X.INSTALL_DATE <= X.JOB_END_DATE and TEMP1.DATE_OF_TEST > X.JOB_END_DATE) or (X.INSTALL_DATE IS NOT NULL AND TEMP1.DATE_OF_TEST > X.INSTALL_DATE) or (X.JOB_END_DATE IS NOT NULL AND TEMP1.DATE_OF_TEST > X.JOB_END_DATE))\
  and X.PROD_STRING_TYPE = 'OP'\
  GROUP by TEMP1.UWI \
  order by TEMP1.UWI"
# WHP 180 DAYS SLOPE #
sql17 = "select TEMP1.UWI,\
       REGR_SLOPE(TEMP1.WHP, TEMP1.DATE_OF_TEST - SYSDATE) SLOPE_WHP_180_DAYS \
  from (SELECT A.UWI,to_number(A.FLOW_PRESSURE) as WHP, A.TEST_DATE as DATE_OF_TEST \
  FROM SLO.WELL_TEST A WHERE A.TEST_RESULT_CODE = 'ACCEPTED' \
  UNION ALL \
  SELECT B.UWI, to_number(B.WELLHEAD_TUB_PRESS) as WHP,B.MISC_TEST_DATE as DATE_OF_TEST \
  FROM IODSC_DM.misc_test_ordc_survey B \
  where REGEXP_LIKE(B.WELLHEAD_TUB_PRESS,'^[[:digit:]]+$') ) TEMP1 INNER JOIN SLO.WELL_LAST_DATA X on TEMP1.UWI = X.UWI\
  WHERE TEMP1.DATE_OF_TEST > SYSDATE - 180 and ((X.INSTALL_DATE IS NOT NULL AND X.JOB_END_DATE IS NOT NULL AND X.INSTALL_DATE > X.JOB_END_DATE and TEMP1.DATE_OF_TEST > X.INSTALL_DATE) or (X.INSTALL_DATE IS NOT NULL AND X.JOB_END_DATE IS NOT NULL AND X.INSTALL_DATE <= X.JOB_END_DATE and TEMP1.DATE_OF_TEST > X.JOB_END_DATE) or (X.INSTALL_DATE IS NOT NULL AND TEMP1.DATE_OF_TEST > X.INSTALL_DATE) or (X.JOB_END_DATE IS NOT NULL AND TEMP1.DATE_OF_TEST > X.JOB_END_DATE))\
  and X.PROD_STRING_TYPE = 'OP'\
  GROUP by TEMP1.UWI \
  order by TEMP1.UWI"
#######################
# 30 Days FAP Sonolog #
sql18 = "SELECT TEMP1.UWI, TEMP1.GRID_NAME,\
       REGR_SLOPE(TEMP1.FLUID_ABOVE_PUMP, TEMP1.TEST_DATE - SYSDATE) SLOPE_FAP_30_DAYS,\
       REGR_INTERCEPT(TEMP1.FLUID_ABOVE_PUMP, TEMP1.TEST_DATE - SYSDATE) INTERCEPT_FAP,\
       REGR_COUNT(TEMP1.FLUID_ABOVE_PUMP, TEMP1.TEST_DATE - SYSDATE) NUMBER_OF_DATA_FAP,\
       REGR_R2(TEMP1.FLUID_ABOVE_PUMP, TEMP1.TEST_DATE - SYSDATE) RSQ_FAP\
  FROM (SELECT * FROM SLO.MISC_TEST_SONOLOG A \
         ORDER BY A.GRID_NAME, A.TEST_DATE, A.UWI ASC) TEMP1\
  INNER JOIN SLO.WELL_LAST_DATA B ON TEMP1.GRID_NAME = B.GRID_NAME\
 WHERE SYSDATE - TEMP1.TEST_DATE <= 30 and ((B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE > B.JOB_END_DATE and TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE <= B.JOB_END_DATE and TEMP1.TEST_DATE > B.JOB_END_DATE) or (B.INSTALL_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.JOB_END_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.JOB_END_DATE))\
   AND TEMP1.TEST_DATE > B.INSTALL_DATE\
   AND B.PROD_STRING_TYPE = 'OP'\
   AND B.STATUS IN ('ON', 'OFF')\
 GROUP BY TEMP1.GRID_NAME, TEMP1.UWI\
 ORDER BY TEMP1.GRID_NAME ASC"
# 60 Days FAP Sonolog #
sql19 = "SELECT TEMP1.UWI, TEMP1.GRID_NAME,\
       REGR_SLOPE(TEMP1.FLUID_ABOVE_PUMP, TEMP1.TEST_DATE - SYSDATE) SLOPE_FAP_60_DAYS,\
       REGR_INTERCEPT(TEMP1.FLUID_ABOVE_PUMP, TEMP1.TEST_DATE - SYSDATE) INTERCEPT_FAP,\
       REGR_COUNT(TEMP1.FLUID_ABOVE_PUMP, TEMP1.TEST_DATE - SYSDATE) NUMBER_OF_DATA_FAP,\
       REGR_R2(TEMP1.FLUID_ABOVE_PUMP, TEMP1.TEST_DATE - SYSDATE) RSQ_FAP\
  FROM (SELECT * FROM SLO.MISC_TEST_SONOLOG A \
         ORDER BY A.GRID_NAME, A.TEST_DATE, A.UWI ASC) TEMP1\
  INNER JOIN SLO.WELL_LAST_DATA B ON TEMP1.GRID_NAME = B.GRID_NAME\
 WHERE SYSDATE - TEMP1.TEST_DATE <= 60 and ((B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE > B.JOB_END_DATE and TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE <= B.JOB_END_DATE and TEMP1.TEST_DATE > B.JOB_END_DATE) or (B.INSTALL_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.JOB_END_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.JOB_END_DATE))\
   AND TEMP1.TEST_DATE > B.INSTALL_DATE\
   AND B.PROD_STRING_TYPE = 'OP'\
   AND B.STATUS IN ('ON', 'OFF')\
 GROUP BY TEMP1.GRID_NAME, TEMP1.UWI\
 ORDER BY TEMP1.GRID_NAME ASC"
# 90 Days FAP Sonolog #
sql20 = "SELECT TEMP1.UWI, TEMP1.GRID_NAME,\
       REGR_SLOPE(TEMP1.FLUID_ABOVE_PUMP, TEMP1.TEST_DATE - SYSDATE) SLOPE_FAP_90_DAYS,\
       REGR_INTERCEPT(TEMP1.FLUID_ABOVE_PUMP, TEMP1.TEST_DATE - SYSDATE) INTERCEPT_FAP,\
       REGR_COUNT(TEMP1.FLUID_ABOVE_PUMP, TEMP1.TEST_DATE - SYSDATE) NUMBER_OF_DATA_FAP,\
       REGR_R2(TEMP1.FLUID_ABOVE_PUMP, TEMP1.TEST_DATE - SYSDATE) RSQ_FAP\
  FROM (SELECT * FROM SLO.MISC_TEST_SONOLOG A \
         ORDER BY A.GRID_NAME, A.TEST_DATE, A.UWI ASC) TEMP1\
  INNER JOIN SLO.WELL_LAST_DATA B ON TEMP1.GRID_NAME = B.GRID_NAME\
 WHERE SYSDATE - TEMP1.TEST_DATE <= 90 and ((B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE > B.JOB_END_DATE and TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE <= B.JOB_END_DATE and TEMP1.TEST_DATE > B.JOB_END_DATE) or (B.INSTALL_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.JOB_END_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.JOB_END_DATE))\
   AND TEMP1.TEST_DATE > B.INSTALL_DATE\
   AND B.PROD_STRING_TYPE = 'OP'\
   AND B.STATUS IN ('ON', 'OFF')\
 GROUP BY TEMP1.GRID_NAME, TEMP1.UWI\
 ORDER BY TEMP1.GRID_NAME ASC"
# 180 Days FAP Sonolog #
sql21 = "SELECT TEMP1.UWI, TEMP1.GRID_NAME,\
       REGR_SLOPE(TEMP1.FLUID_ABOVE_PUMP, TEMP1.TEST_DATE - SYSDATE) SLOPE_FAP_180_DAYS,\
       REGR_INTERCEPT(TEMP1.FLUID_ABOVE_PUMP, TEMP1.TEST_DATE - SYSDATE) INTERCEPT_FAP,\
       REGR_COUNT(TEMP1.FLUID_ABOVE_PUMP, TEMP1.TEST_DATE - SYSDATE) NUMBER_OF_DATA_FAP,\
       REGR_R2(TEMP1.FLUID_ABOVE_PUMP, TEMP1.TEST_DATE - SYSDATE) RSQ_FAP\
  FROM (SELECT * FROM SLO.MISC_TEST_SONOLOG A \
         ORDER BY A.GRID_NAME, A.TEST_DATE, A.UWI ASC) TEMP1\
  INNER JOIN SLO.WELL_LAST_DATA B ON TEMP1.GRID_NAME = B.GRID_NAME\
 WHERE SYSDATE - TEMP1.TEST_DATE <= 180 and ((B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE > B.JOB_END_DATE and TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE <= B.JOB_END_DATE and TEMP1.TEST_DATE > B.JOB_END_DATE) or (B.INSTALL_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.JOB_END_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.JOB_END_DATE))\
   AND B.PROD_STRING_TYPE = 'OP'\
   AND B.STATUS IN ('ON', 'OFF')\
 GROUP BY TEMP1.GRID_NAME, TEMP1.UWI\
 ORDER BY TEMP1.GRID_NAME ASC"
# Last PIS FAP Sonolog #
sql22 = "SELECT TEMP1.UWI, TEMP1.GRID_NAME,\
       REGR_SLOPE(TEMP1.FLUID_ABOVE_PUMP, TEMP1.TEST_DATE - SYSDATE) SLOPE_FAP_LAST_PIS,\
       REGR_INTERCEPT(TEMP1.FLUID_ABOVE_PUMP, TEMP1.TEST_DATE - SYSDATE) INTERCEPT_FAP,\
       REGR_COUNT(TEMP1.FLUID_ABOVE_PUMP, TEMP1.TEST_DATE - SYSDATE) NUMBER_OF_TOTAL_DATA_FAP,\
       REGR_R2(TEMP1.FLUID_ABOVE_PUMP, TEMP1.TEST_DATE - SYSDATE) RSQ_FAP\
  FROM (SELECT * FROM SLO.MISC_TEST_SONOLOG A\
         ORDER BY A.GRID_NAME, A.TEST_DATE, A.UWI ASC) TEMP1\
  INNER JOIN SLO.WELL_LAST_DATA B ON TEMP1.GRID_NAME = B.GRID_NAME\
 WHERE TEMP1.TEST_DATE <= SYSDATE and ((B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE > B.JOB_END_DATE and TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE <= B.JOB_END_DATE and TEMP1.TEST_DATE > B.JOB_END_DATE) or (B.INSTALL_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.INSTALL_DATE) or (B.JOB_END_DATE IS NOT NULL AND TEMP1.TEST_DATE > B.JOB_END_DATE))\
   AND B.PROD_STRING_TYPE = 'OP'\
   AND B.STATUS IN ('ON', 'OFF')\
 GROUP BY TEMP1.GRID_NAME, TEMP1.UWI\
 ORDER BY TEMP1.GRID_NAME ASC"
### 
##############################################
#  ALL AMPERE DATA (BOTH SCADA & NON SCADA)  #
##############################################
# AMPERE 30 DAYS #
sql23 = "with ALL_AMP_TBL as (select case when c.uwi_sca is null then c.uwi_ordc else c.uwi_sca end uwi,\
        case when c.uwi_sca is null then c.test_date_ordc else c.test_date_sca end test_date,\
        case when c.uwi_sca is null then c.amp_a_ordc else c.amp_a_sca end avg_ampere_a,\
        case when c.uwi_sca is null then c.amp_b_ordc else c.amp_b_sca end avg_ampere_b,\
        case when c.uwi_sca is null then c.amp_c_ordc else c.amp_c_sca end avg_ampere_c\
        from (select a.*, b.*\
         from (select uwi uwi_sca, daytime test_date_sca, avg(avg_ampere_a) amp_a_sca, \
          avg(avg_ampere_b) amp_b_sca, avg(avg_ampere_c) amp_c_sca\
           from IODSC_DM.PI_TAG_WELL_AMPERE_AVG_6H \
           group by uwi, daytime \
           order by uwi, daytime) a\
        full outer join \
          (select x.uwi uwi_ordc,\
       x.misc_test_date test_date_ordc,\
       to_number(load_amp_a) amp_a_ordc,\
       to_number(load_amp_b) amp_b_ordc,\
       to_number(load_amp_c) amp_c_ordc\
  from (select *\
          from (select uwi,\
                       misc_test_date,\
                       trim(translate(load_amp_a,\
                                      chr(10) || chr(13) || chr(09),\
                                      ' ')) load_amp_a,\
                       trim(translate(load_amp_b,\
                                      chr(10) || chr(13) || chr(09),\
                                      ' ')) load_amp_b,\
                       trim(translate(load_amp_c,\
                                      chr(10) || chr(13) || chr(09),\
                                      ' ')) load_amp_c\
                  from IODSC_DM.MISC_TEST_ORDC_SURVEY)\
         where 1 = 1\
           and load_amp_a is not null\
           and load_amp_b is not null\
           and load_amp_c is not null\
           and REGEXP_LIKE(load_amp_a, '^[[:digit:]]+$')\
           and REGEXP_LIKE(load_amp_b, '^[[:digit:]]+$')\
           and REGEXP_LIKE(load_amp_c, '^[[:digit:]]+$')\
         order by uwi, misc_test_date) x\
) b\
                   on a.uwi_sca = b.uwi_ordc and a.test_date_sca = b.test_date_ordc) c)\
        select A.UWI,\
          REGR_SLOPE(A.AVG_AMPERE_A, A.TEST_DATE - SYSDATE) SLOPE_AMPERE_A_30_DAYS,\
          REGR_SLOPE(A.AVG_AMPERE_B, A.TEST_DATE - SYSDATE) SLOPE_AMPERE_B_30_DAYS,\
          REGR_SLOPE(A.AVG_AMPERE_C, A.TEST_DATE - SYSDATE) SLOPE_AMPERE_C_30_DAYS\
            from ALL_AMP_TBL A INNER JOIN SLO.WELL_LAST_DATA B on A.UWI = B.UWI\
            where A.TEST_DATE > SYSDATE - 30 and ((B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE > B.JOB_END_DATE and A.TEST_DATE > B.INSTALL_DATE) or (B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE <= B.JOB_END_DATE and A.TEST_DATE > B.JOB_END_DATE) or (B.INSTALL_DATE IS NOT NULL AND A.TEST_DATE > B.INSTALL_DATE) or (B.JOB_END_DATE IS NOT NULL AND A.TEST_DATE > B.JOB_END_DATE))\
            and B.PROD_STRING_TYPE = 'OP'\
            group by A.UWI"
# AMPERE 60 DAYS #
sql24 = "with ALL_AMP_TBL as (select case when c.uwi_sca is null then c.uwi_ordc else c.uwi_sca end uwi,\
        case when c.uwi_sca is null then c.test_date_ordc else c.test_date_sca end test_date,\
        case when c.uwi_sca is null then c.amp_a_ordc else c.amp_a_sca end avg_ampere_a,\
        case when c.uwi_sca is null then c.amp_b_ordc else c.amp_b_sca end avg_ampere_b,\
        case when c.uwi_sca is null then c.amp_c_ordc else c.amp_c_sca end avg_ampere_c\
        from (select a.*, b.*\
         from (select uwi uwi_sca, daytime test_date_sca, avg(avg_ampere_a) amp_a_sca, \
          avg(avg_ampere_b) amp_b_sca, avg(avg_ampere_c) amp_c_sca\
           from IODSC_DM.PI_TAG_WELL_AMPERE_AVG_6H \
           group by uwi, daytime \
           order by uwi, daytime) a\
        full outer join \
          (select x.uwi uwi_ordc,\
       x.misc_test_date test_date_ordc,\
       to_number(load_amp_a) amp_a_ordc,\
       to_number(load_amp_b) amp_b_ordc,\
       to_number(load_amp_c) amp_c_ordc\
  from (select *\
          from (select uwi,\
                       misc_test_date,\
                       trim(translate(load_amp_a,\
                                      chr(10) || chr(13) || chr(09),\
                                      ' ')) load_amp_a,\
                       trim(translate(load_amp_b,\
                                      chr(10) || chr(13) || chr(09),\
                                      ' ')) load_amp_b,\
                       trim(translate(load_amp_c,\
                                      chr(10) || chr(13) || chr(09),\
                                      ' ')) load_amp_c\
                  from IODSC_DM.MISC_TEST_ORDC_SURVEY)\
         where 1 = 1\
           and load_amp_a is not null\
           and load_amp_b is not null\
           and load_amp_c is not null\
           and REGEXP_LIKE(load_amp_a, '^[[:digit:]]+$')\
           and REGEXP_LIKE(load_amp_b, '^[[:digit:]]+$')\
           and REGEXP_LIKE(load_amp_c, '^[[:digit:]]+$')\
         order by uwi, misc_test_date) x\
) b\
                   on a.uwi_sca = b.uwi_ordc and a.test_date_sca = b.test_date_ordc) c)\
        select A.UWI,\
          REGR_SLOPE(A.AVG_AMPERE_A, A.TEST_DATE - SYSDATE) SLOPE_AMPERE_A_60_DAYS,\
          REGR_SLOPE(A.AVG_AMPERE_B, A.TEST_DATE - SYSDATE) SLOPE_AMPERE_B_60_DAYS,\
          REGR_SLOPE(A.AVG_AMPERE_C, A.TEST_DATE - SYSDATE) SLOPE_AMPERE_C_60_DAYS\
            from ALL_AMP_TBL A INNER JOIN SLO.WELL_LAST_DATA B on A.UWI = B.UWI\
            where A.TEST_DATE > SYSDATE - 60 and ((B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE > B.JOB_END_DATE and A.TEST_DATE > B.INSTALL_DATE) or (B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE <= B.JOB_END_DATE and A.TEST_DATE > B.JOB_END_DATE) or (B.INSTALL_DATE IS NOT NULL AND A.TEST_DATE > B.INSTALL_DATE) or (B.JOB_END_DATE IS NOT NULL AND A.TEST_DATE > B.JOB_END_DATE))\
            and B.PROD_STRING_TYPE = 'OP'\
            group by A.UWI"
# AMPERE 90 DAYS #
sql25 = "with ALL_AMP_TBL as (select case when c.uwi_sca is null then c.uwi_ordc else c.uwi_sca end uwi,\
        case when c.uwi_sca is null then c.test_date_ordc else c.test_date_sca end test_date,\
        case when c.uwi_sca is null then c.amp_a_ordc else c.amp_a_sca end avg_ampere_a,\
        case when c.uwi_sca is null then c.amp_b_ordc else c.amp_b_sca end avg_ampere_b,\
        case when c.uwi_sca is null then c.amp_c_ordc else c.amp_c_sca end avg_ampere_c\
        from (select a.*, b.*\
         from (select uwi uwi_sca, daytime test_date_sca, avg(avg_ampere_a) amp_a_sca, \
          avg(avg_ampere_b) amp_b_sca, avg(avg_ampere_c) amp_c_sca\
           from IODSC_DM.PI_TAG_WELL_AMPERE_AVG_6H \
           group by uwi, daytime \
           order by uwi, daytime) a\
        full outer join \
          (select x.uwi uwi_ordc,\
       x.misc_test_date test_date_ordc,\
       to_number(load_amp_a) amp_a_ordc,\
       to_number(load_amp_b) amp_b_ordc,\
       to_number(load_amp_c) amp_c_ordc\
  from (select *\
          from (select uwi,\
                       misc_test_date,\
                       trim(translate(load_amp_a,\
                                      chr(10) || chr(13) || chr(09),\
                                      ' ')) load_amp_a,\
                       trim(translate(load_amp_b,\
                                      chr(10) || chr(13) || chr(09),\
                                      ' ')) load_amp_b,\
                       trim(translate(load_amp_c,\
                                      chr(10) || chr(13) || chr(09),\
                                      ' ')) load_amp_c\
                  from IODSC_DM.MISC_TEST_ORDC_SURVEY)\
         where 1 = 1\
           and load_amp_a is not null\
           and load_amp_b is not null\
           and load_amp_c is not null\
           and REGEXP_LIKE(load_amp_a, '^[[:digit:]]+$')\
           and REGEXP_LIKE(load_amp_b, '^[[:digit:]]+$')\
           and REGEXP_LIKE(load_amp_c, '^[[:digit:]]+$')\
         order by uwi, misc_test_date) x\
) b\
                   on a.uwi_sca = b.uwi_ordc and a.test_date_sca = b.test_date_ordc) c)\
        select A.UWI,\
          REGR_SLOPE(A.AVG_AMPERE_A, A.TEST_DATE - SYSDATE) SLOPE_AMPERE_A_90_DAYS,\
          REGR_SLOPE(A.AVG_AMPERE_B, A.TEST_DATE - SYSDATE) SLOPE_AMPERE_B_90_DAYS,\
          REGR_SLOPE(A.AVG_AMPERE_C, A.TEST_DATE - SYSDATE) SLOPE_AMPERE_C_90_DAYS\
            from ALL_AMP_TBL A INNER JOIN SLO.WELL_LAST_DATA B on A.UWI = B.UWI\
            where A.TEST_DATE > SYSDATE - 90 and ((B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE > B.JOB_END_DATE and A.TEST_DATE > B.INSTALL_DATE) or (B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE <= B.JOB_END_DATE and A.TEST_DATE > B.JOB_END_DATE) or (B.INSTALL_DATE IS NOT NULL AND A.TEST_DATE > B.INSTALL_DATE) or (B.JOB_END_DATE IS NOT NULL AND A.TEST_DATE > B.JOB_END_DATE))\
            and B.PROD_STRING_TYPE = 'OP'\
            group by A.UWI"
# AMPERE 180 DAYS #
sql26 = "with ALL_AMP_TBL as (select case when c.uwi_sca is null then c.uwi_ordc else c.uwi_sca end uwi,\
        case when c.uwi_sca is null then c.test_date_ordc else c.test_date_sca end test_date,\
        case when c.uwi_sca is null then c.amp_a_ordc else c.amp_a_sca end avg_ampere_a,\
        case when c.uwi_sca is null then c.amp_b_ordc else c.amp_b_sca end avg_ampere_b,\
        case when c.uwi_sca is null then c.amp_c_ordc else c.amp_c_sca end avg_ampere_c\
        from (select a.*, b.*\
         from (select uwi uwi_sca, daytime test_date_sca, avg(avg_ampere_a) amp_a_sca, \
          avg(avg_ampere_b) amp_b_sca, avg(avg_ampere_c) amp_c_sca\
           from IODSC_DM.PI_TAG_WELL_AMPERE_AVG_6H \
           group by uwi, daytime \
           order by uwi, daytime) a\
        full outer join \
          (select x.uwi uwi_ordc,\
       x.misc_test_date test_date_ordc,\
       to_number(load_amp_a) amp_a_ordc,\
       to_number(load_amp_b) amp_b_ordc,\
       to_number(load_amp_c) amp_c_ordc\
  from (select *\
          from (select uwi,\
                       misc_test_date,\
                       trim(translate(load_amp_a,\
                                      chr(10) || chr(13) || chr(09),\
                                      ' ')) load_amp_a,\
                       trim(translate(load_amp_b,\
                                      chr(10) || chr(13) || chr(09),\
                                      ' ')) load_amp_b,\
                       trim(translate(load_amp_c,\
                                      chr(10) || chr(13) || chr(09),\
                                      ' ')) load_amp_c\
                  from IODSC_DM.MISC_TEST_ORDC_SURVEY)\
         where 1 = 1\
           and load_amp_a is not null\
           and load_amp_b is not null\
           and load_amp_c is not null\
           and REGEXP_LIKE(load_amp_a, '^[[:digit:]]+$')\
           and REGEXP_LIKE(load_amp_b, '^[[:digit:]]+$')\
           and REGEXP_LIKE(load_amp_c, '^[[:digit:]]+$')\
         order by uwi, misc_test_date) x\
) b\
                   on a.uwi_sca = b.uwi_ordc and a.test_date_sca = b.test_date_ordc) c)\
        select A.UWI,\
          REGR_SLOPE(A.AVG_AMPERE_A, A.TEST_DATE - SYSDATE) SLOPE_AMPERE_A_180_DAYS,\
          REGR_SLOPE(A.AVG_AMPERE_B, A.TEST_DATE - SYSDATE) SLOPE_AMPERE_B_180_DAYS,\
          REGR_SLOPE(A.AVG_AMPERE_C, A.TEST_DATE - SYSDATE) SLOPE_AMPERE_C_180_DAYS\
            from ALL_AMP_TBL A INNER JOIN SLO.WELL_LAST_DATA B on A.UWI = B.UWI\
            where A.TEST_DATE > SYSDATE - 180 and ((B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE > B.JOB_END_DATE and A.TEST_DATE > B.INSTALL_DATE) or (B.INSTALL_DATE IS NOT NULL AND B.JOB_END_DATE IS NOT NULL AND B.INSTALL_DATE <= B.JOB_END_DATE and A.TEST_DATE > B.JOB_END_DATE) or (B.INSTALL_DATE IS NOT NULL AND A.TEST_DATE > B.INSTALL_DATE) or (B.JOB_END_DATE IS NOT NULL AND A.TEST_DATE > B.JOB_END_DATE))\
            and B.PROD_STRING_TYPE = 'OP'\
            group by A.UWI"
###
# Define connection #
def read_query(connection, sql): 
    cursor = connection.cursor() 
    try: 
        cursor.execute(sql) 
        names = [ x[0] for x in cursor.description] 
        rows = cursor.fetchall() 
        return pd.DataFrame( rows, columns=names) 
    finally: 
        if cursor is not None: 
            cursor.close() 
    df = pd.read_sql(sql,connection)
    return df
# Read Query for Each Sql #
df1  = read_query(connection,sql1)
df2  = read_query(connection,sql2)
df3  = read_query(connection,sql3)
# WFL
df4  = read_query(connection,sql4)
df5  = read_query(connection,sql5)
df6  = read_query(connection,sql6)
df7  = read_query(connection,sql7)
df8  = read_query(connection,sql8)
# BFPD
df9  = read_query(connection,sql9)
df10 = read_query(connection,sql10)
df11 = read_query(connection,sql11)
df12 = read_query(connection,sql12)
df13 = read_query(connection,sql13)
# WHP
df14 = read_query(connection,sql14)
df15 = read_query(connection,sql15)
df16 = read_query(connection,sql16)
df17 = read_query(connection,sql17)
# FAP
df18 = read_query(connection,sql18)
df19 = read_query(connection,sql19)
df20 = read_query(connection,sql20)
df21 = read_query(connection,sql21)
df22 = read_query(connection,sql22)
# AMPERE
df23 = read_query(connection,sql23)
df24 = read_query(connection,sql24)
df25 = read_query(connection,sql25)
df26 = read_query(connection,sql26)
# Set Index to UWI #
df1  = df1.set_index('UWI')
df2  = df2.set_index('UWI')
df3  = df3.set_index('UWI')
# WFL
df4  = df4.set_index('UWI')
df5  = df5.set_index('UWI')
df6  = df6.set_index('UWI')
df7  = df7.set_index('UWI')
df8  = df8.set_index('UWI')
# BFPD
df9  = df9.set_index('UWI')
df10 = df10.set_index('UWI')
df11 = df11.set_index('UWI')
df12 = df12.set_index('UWI')
df13 = df13.set_index('UWI')
# WHP
df14 = df14.set_index('UWI')
df15 = df15.set_index('UWI')
df16 = df16.set_index('UWI')
df17 = df17.set_index('UWI')
# FAP
df18 = df18.set_index('UWI')
df19 = df19.set_index('UWI')
df20 = df20.set_index('UWI')
df21 = df21.set_index('UWI')
df22 = df22.set_index('UWI')
# AMPERE
df23 = df23.set_index('UWI')
df24 = df24.set_index('UWI')
df25 = df25.set_index('UWI')
df26 = df26.set_index('UWI')
# Combine all df
dfa = df1.copy()
for df in [df2,df3,df4,df5,df6,df7,df8,df9,df10,df11,df12,df13,df14,df15,df16,df17,df18,df19,df20,df21,df22,df23,df24,df25,df26]:
    print(df.size)
    dfa = pd.merge(dfa,df,how='left',left_index=True, right_index =True)
print(dfa.size)
# Exclude Grid Name #
dfa.drop(dfa.columns[[9,12,15,20,25,30,35,40,49,58,67,76,89,94,99,104,109]], axis=1, inplace=True)
# Set Type to Float #
for i in dfa.columns [5:]:
    dfa['%s'%i]=dfa['%s'%i].astype('float64')
####
# Slope normalization for dfa #
header = ['SLOPE_WFL_30_DAYS','SLOPE_WFL_60_DAYS','SLOPE_WFL_90_DAYS','SLOPE_WFL_180_DAYS','SLOPE_FAP_30_DAYS','SLOPE_FAP_60_DAYS','SLOPE_FAP_90_DAYS','SLOPE_FAP_180_DAYS','SLOPE_BFPD_30_DAYS','SLOPE_BFPD_60_DAYS','SLOPE_BFPD_90_DAYS','SLOPE_BFPD_180_DAYS','SLOPE_AMPERE_A_30_DAYS','SLOPE_AMPERE_A_60_DAYS','SLOPE_AMPERE_A_90_DAYS','SLOPE_AMPERE_A_180_DAYS','SLOPE_WHP_30_DAYS','SLOPE_WHP_60_DAYS','SLOPE_WHP_90_DAYS','SLOPE_WHP_180_DAYS']
header_output = ['Normalized_SLOPE_WFL_30_DAYS','Normalized_SLOPE_WFL_60_DAYS','Normalized_SLOPE_WFL_90_DAYS','Normalized_SLOPE_WFL_180_DAYS','Normalized_SLOPE_FAP_30_DAYS','Normalized_SLOPE_FAP_60_DAYS','Normalized_SLOPE_FAP_90_DAYS','Normalized_SLOPE_FAP_180_DAYS','Normalized_SLOPE_BFPD_30_DAYS','Normalized_SLOPE_BFPD_60_DAYS','Normalized_SLOPE_BFPD_90_DAYS','Normalized_SLOPE_BFPD_180_DAYS','Normalized_SLOPE_AMPERE_A_30_DAYS','Normalized_SLOPE_AMPERE_A_60_DAYS','Normalized_SLOPE_AMPERE_A_90_DAYS','Normalized_SLOPE_AMPERE_A_180_DAYS','Normalized_SLOPE_WHP_30_DAYS','Normalized_SLOPE_WHP_60_DAYS','Normalized_SLOPE_WHP_90_DAYS','Normalized_SLOPE_WHP_180_DAYS']
def normalized_slope(dfa,header,header_output):
    for i in range (len(header)):
        C = dfa[header[i]]
        K = 2*np.arctan([C])/np.pi
        K = K.reshape(-1,1)
        dfa[header_output[i]] = K
    return dfa
dfa = normalized_slope(dfa,header,header_output)
#####
# Fuzzy Logic #
# Five Parameters for Fuzzy & Fuzzy Sets: 
#  1.AMP (Ampere)                     : Fuzzy Sets 2 --> Decrease, Increase 
#  2.FAP (Fluid Above Pump)           : Fuzzy Sets 2 --> Decrease, Increase
#  3.BFPD (Gross production)          : Fuzzy Sets 2 --> Decrease, Increase
#  4.WHP (Well Head Pressure)         : Fuzzy Sets 2 --> Decrease, Indcrease 
#  5.WFL (Working Fluid Level)        : Fuzzy Sets 2 --> Decrease, Increase  # Not used anymore
# Fuzzy Confidence Index (FCI) as the output of in term of Percentage or Fraction 
# All parameters using Slope, instead of absolute change/delta
FUZZY_DATA1 = pd.DataFrame([])
FUZZY_DATA2 = pd.DataFrame([])
FUZZY_DATA3 = pd.DataFrame([])
FUZZY_DATA4 = pd.DataFrame([])
FUZZY_DATA5 = pd.DataFrame([])
FUZZY_DATA6 = pd.DataFrame([])
FUZZY_DATA7 = pd.DataFrame([])
FUZZY_DATA8 = pd.DataFrame([])
FUZZY_DATA9 = pd.DataFrame([])
FUZZY_DATA10 = pd.DataFrame([])
FUZZY_DATA11 = pd.DataFrame([])
FUZZY_DATA12 = pd.DataFrame([])
FUZZY_DATA13 = pd.DataFrame([])
FUZZY_DATA14 = pd.DataFrame([])
FUZZY_DATA15 = pd.DataFrame([])
FUZZY_DATA16 = pd.DataFrame([])
FUZZY_DATA17 = pd.DataFrame([])
FUZZY_DATA18 = pd.DataFrame([])
FUZZY_DATA19 = pd.DataFrame([])
FUZZY_DATA20 = pd.DataFrame([])
#
FUZZY_DATA1['FAP30']     = dfa['Normalized_SLOPE_FAP_30_DAYS']
FUZZY_DATA2['FAP60']     = dfa['Normalized_SLOPE_FAP_60_DAYS']
FUZZY_DATA3['FAP90']     = dfa['Normalized_SLOPE_FAP_90_DAYS']
FUZZY_DATA4['FAP180']    = dfa['Normalized_SLOPE_FAP_180_DAYS']
#
FUZZY_DATA5['BFPD30']    = dfa['Normalized_SLOPE_BFPD_30_DAYS']
FUZZY_DATA6['BFPD60']    = dfa['Normalized_SLOPE_BFPD_60_DAYS']
FUZZY_DATA7['BFPD90']    = dfa['Normalized_SLOPE_BFPD_90_DAYS']
FUZZY_DATA8['BFPD180']   = dfa['Normalized_SLOPE_BFPD_180_DAYS']
#
FUZZY_DATA9['WFL30']     = dfa['Normalized_SLOPE_WFL_30_DAYS']
FUZZY_DATA10['WFL60']    = dfa['Normalized_SLOPE_WFL_60_DAYS']
FUZZY_DATA11['WFL90']    = dfa['Normalized_SLOPE_WFL_90_DAYS']
FUZZY_DATA12['WFL180']   = dfa['Normalized_SLOPE_WFL_180_DAYS']
#
FUZZY_DATA13['AMP30']    = dfa['Normalized_SLOPE_AMPERE_A_30_DAYS']
FUZZY_DATA14['AMP60']    = dfa['Normalized_SLOPE_AMPERE_A_60_DAYS']
FUZZY_DATA15['AMP90']    = dfa['Normalized_SLOPE_AMPERE_A_90_DAYS']
FUZZY_DATA16['AMP180']   = dfa['Normalized_SLOPE_AMPERE_A_180_DAYS']
#
FUZZY_DATA17['WHP30']    = dfa['Normalized_SLOPE_WHP_30_DAYS']
FUZZY_DATA18['WHP60']    = dfa['Normalized_SLOPE_WHP_60_DAYS']
FUZZY_DATA19['WHP90']    = dfa['Normalized_SLOPE_WHP_90_DAYS']
FUZZY_DATA20['WHP180']   = dfa['Normalized_SLOPE_WHP_180_DAYS']
#
FUZZY_DATA = pd.concat([FUZZY_DATA5['BFPD30'],FUZZY_DATA13['AMP30'],FUZZY_DATA1['FAP30'],FUZZY_DATA17['WHP30'],FUZZY_DATA6['BFPD60'],FUZZY_DATA14['AMP60'],FUZZY_DATA2['FAP60'],FUZZY_DATA18['WHP60'],FUZZY_DATA7['BFPD90'],FUZZY_DATA15['AMP90'], FUZZY_DATA3['FAP90'],FUZZY_DATA19['WHP90'],FUZZY_DATA8['BFPD180'],FUZZY_DATA16['AMP180'],FUZZY_DATA4['FAP180'],FUZZY_DATA20['WHP180']],axis=1)
FUZZY_DATA = FUZZY_DATA.reindex(dfa.index)
FUZZY_DATA = FUZZY_DATA[FUZZY_DATA.values.sum(axis=1) != 0] 
#FUZZY_DATA = FUZZY_DATA.dropna()
######
# 30 Days
from skfuzzy import control as ctrl
BFPD30   = ctrl.Antecedent(np.arange(-1,1.05,0.05), 'BFPD30')
AMP30    = ctrl.Antecedent(np.arange(-1,1.05,0.05), 'AMP30')
FAP30    = ctrl.Antecedent(np.arange(-1,1.05,0.05), 'FAP30')
WHP30    = ctrl.Antecedent(np.arange(-1,1.05,0.05), 'WHP30')
FCI30    = ctrl.Consequent(np.arange(-1,1.05,0.05), 'FCI30')
BFPD30['Decrease'] = fuzz.trimf(BFPD30.universe,[-1, -1, 0.03])
BFPD30['Increase'] = fuzz.trimf(BFPD30.universe,[-0.03, 1, 1])
AMP30['Decrease']  = fuzz.trimf(AMP30.universe,[-1, -1, 0.03])
AMP30['Increase']  = fuzz.trimf(AMP30.universe,[-0.03, 1, 1])
FAP30['Decrease']  = fuzz.trimf(FAP30.universe,[-1, -1, 0.03])
FAP30['Increase']  = fuzz.trimf(FAP30.universe,[-0.03, 1, 1])
WHP30['Decrease']  = fuzz.trimf(WHP30.universe,[-1, -1, 0.03])
WHP30['Increase']  = fuzz.trimf(WHP30.universe,[-0.03, 1, 1])
FCI30['Low'] = fuzz.trimf(FCI30.universe, [-1, -1, 0.03])
FCI30['High'] = fuzz.trimf(FCI30.universe, [-0.03, 1, 1])
rule1  = ctrl.Rule(BFPD30['Decrease'] & AMP30['Decrease'] & FAP30['Decrease'] & WHP30['Decrease'], FCI30['Low'])
rule2  = ctrl.Rule(BFPD30['Decrease'] & AMP30['Decrease'] & FAP30['Decrease'] & WHP30['Increase'], FCI30['Low'])
rule3  = ctrl.Rule(BFPD30['Decrease'] & AMP30['Decrease'] & FAP30['Increase'] & WHP30['Decrease'], FCI30['Low'])
rule4  = ctrl.Rule(BFPD30['Decrease'] & AMP30['Decrease'] & FAP30['Increase'] & WHP30['Increase'], FCI30['Low'])
rule5  = ctrl.Rule(BFPD30['Decrease'] & AMP30['Increase'] & FAP30['Decrease'] & WHP30['Decrease'], FCI30['Low'])
rule6  = ctrl.Rule(BFPD30['Decrease'] & AMP30['Increase'] & FAP30['Decrease'] & WHP30['Increase'], FCI30['Low'])
rule7  = ctrl.Rule(BFPD30['Decrease'] & AMP30['Increase'] & FAP30['Increase'] & WHP30['Decrease'], FCI30['Low'])
rule8  = ctrl.Rule(BFPD30['Decrease'] & AMP30['Increase'] & FAP30['Increase'] & WHP30['Increase'], FCI30['Low'])
rule9  = ctrl.Rule(BFPD30['Increase'] & AMP30['Decrease'] & FAP30['Decrease'] & WHP30['Decrease'], FCI30['High'])
rule10 = ctrl.Rule(BFPD30['Increase'] & AMP30['Decrease'] & FAP30['Decrease'] & WHP30['Increase'], FCI30['High'])
rule11 = ctrl.Rule(BFPD30['Increase'] & AMP30['Decrease'] & FAP30['Increase'] & WHP30['Decrease'], FCI30['High'])
rule12 = ctrl.Rule(BFPD30['Increase'] & AMP30['Decrease'] & FAP30['Increase'] & WHP30['Increase'], FCI30['High'])
rule13 = ctrl.Rule(BFPD30['Increase'] & AMP30['Increase'] & FAP30['Decrease'] & WHP30['Decrease'], FCI30['High'])
rule14 = ctrl.Rule(BFPD30['Increase'] & AMP30['Increase'] & FAP30['Decrease'] & WHP30['Increase'], FCI30['High'])
rule15 = ctrl.Rule(BFPD30['Increase'] & AMP30['Increase'] & FAP30['Increase'] & WHP30['Decrease'], FCI30['High'])
rule16 = ctrl.Rule(BFPD30['Increase'] & AMP30['Increase'] & FAP30['Increase'] & WHP30['Increase'], FCI30['High'])
# 60 Days
BFPD60   = ctrl.Antecedent(np.arange(-1,1.05,0.05), 'BFPD60')
AMP60    = ctrl.Antecedent(np.arange(-1,1.05,0.05), 'AMP60')
FAP60    = ctrl.Antecedent(np.arange(-1,1.05,0.05), 'FAP60')
WHP60    = ctrl.Antecedent(np.arange(-1,1.05,0.05), 'WHP60')
FCI60    = ctrl.Consequent(np.arange(-1,1.05,0.05), 'FCI60')
BFPD60['Decrease'] = fuzz.trimf(BFPD60.universe,[-1, -1, 0.03])
BFPD60['Increase'] = fuzz.trimf(BFPD60.universe,[-0.03, 1, 1])
AMP60['Decrease']  = fuzz.trimf(AMP60.universe,[-1, -1, 0.03])
AMP60['Increase']  = fuzz.trimf(AMP60.universe,[-0.03, 1, 1])
FAP60['Decrease']  = fuzz.trimf(FAP60.universe,[-1, -1, 0.03])
FAP60['Increase']  = fuzz.trimf(FAP60.universe,[-0.03, 1, 1])
WHP60['Decrease']  = fuzz.trimf(WHP60.universe,[-1, -1, 0.03])
WHP60['Increase']  = fuzz.trimf(WHP60.universe,[-0.03, 1, 1])
FCI60['Low'] = fuzz.trimf(FCI60.universe, [-1, -1, 0.03])
FCI60['High'] = fuzz.trimf(FCI60.universe, [-0.03, 1, 1])
rule17  = ctrl.Rule(BFPD60['Decrease'] & AMP60['Decrease'] & FAP60['Decrease'] & WHP60['Decrease'], FCI60['Low'])
rule18  = ctrl.Rule(BFPD60['Decrease'] & AMP60['Decrease'] & FAP60['Decrease'] & WHP60['Increase'], FCI60['Low'])
rule19  = ctrl.Rule(BFPD60['Decrease'] & AMP60['Decrease'] & FAP60['Increase'] & WHP60['Decrease'], FCI60['Low'])
rule20  = ctrl.Rule(BFPD60['Decrease'] & AMP60['Decrease'] & FAP60['Increase'] & WHP60['Increase'], FCI60['Low'])
rule21  = ctrl.Rule(BFPD60['Decrease'] & AMP60['Increase'] & FAP60['Decrease'] & WHP60['Decrease'], FCI60['Low'])
rule22  = ctrl.Rule(BFPD60['Decrease'] & AMP60['Increase'] & FAP60['Decrease'] & WHP60['Increase'], FCI60['Low'])
rule23  = ctrl.Rule(BFPD60['Decrease'] & AMP60['Increase'] & FAP60['Increase'] & WHP60['Decrease'], FCI60['Low'])
rule24  = ctrl.Rule(BFPD60['Decrease'] & AMP60['Increase'] & FAP60['Increase'] & WHP60['Increase'], FCI60['Low'])
rule25  = ctrl.Rule(BFPD60['Increase'] & AMP60['Decrease'] & FAP60['Decrease'] & WHP60['Decrease'], FCI60['High'])
rule26 = ctrl.Rule(BFPD60['Increase'] & AMP60['Decrease'] & FAP60['Decrease'] & WHP60['Increase'], FCI60['High'])
rule27 = ctrl.Rule(BFPD60['Increase'] & AMP60['Decrease'] & FAP60['Increase'] & WHP60['Decrease'], FCI60['High'])
rule28 = ctrl.Rule(BFPD60['Increase'] & AMP60['Decrease'] & FAP60['Increase'] & WHP60['Increase'], FCI60['High'])
rule29 = ctrl.Rule(BFPD60['Increase'] & AMP60['Increase'] & FAP60['Decrease'] & WHP60['Decrease'], FCI60['High'])
rule30 = ctrl.Rule(BFPD60['Increase'] & AMP60['Increase'] & FAP60['Decrease'] & WHP60['Increase'], FCI60['High'])
rule31 = ctrl.Rule(BFPD60['Increase'] & AMP60['Increase'] & FAP60['Increase'] & WHP60['Decrease'], FCI60['High'])
rule32 = ctrl.Rule(BFPD60['Increase'] & AMP60['Increase'] & FAP60['Increase'] & WHP60['Increase'], FCI60['High'])
# 90 Days
BFPD90   = ctrl.Antecedent(np.arange(-1,1.05,0.05), 'BFPD90')
AMP90    = ctrl.Antecedent(np.arange(-1,1.05,0.05), 'AMP90')
FAP90    = ctrl.Antecedent(np.arange(-1,1.05,0.05), 'FAP90')
WHP90    = ctrl.Antecedent(np.arange(-1,1.05,0.05), 'WHP90')
FCI90    = ctrl.Consequent(np.arange(-1,1.05,0.05), 'FCI90')
BFPD90['Decrease'] = fuzz.trimf(BFPD90.universe,[-1, -1, 0.03])
BFPD90['Increase'] = fuzz.trimf(BFPD90.universe,[-0.03, 1, 1])
AMP90['Decrease']  = fuzz.trimf(AMP90.universe,[-1, -1, 0.03])
AMP90['Increase']  = fuzz.trimf(AMP90.universe,[-0.03, 1, 1])
FAP90['Decrease']  = fuzz.trimf(FAP90.universe,[-1, -1, 0.03])
FAP90['Increase']  = fuzz.trimf(FAP90.universe,[-0.03, 1, 1])
WHP90['Decrease']  = fuzz.trimf(WHP90.universe,[-1, -1, 0.03])
WHP90['Increase']  = fuzz.trimf(WHP90.universe,[-0.03, 1, 1])
FCI90['Low'] = fuzz.trimf(FCI90.universe, [-1, -1, 0.03])
FCI90['High'] = fuzz.trimf(FCI90.universe, [-0.03, 1, 1])
rule33  = ctrl.Rule(BFPD90['Decrease'] & AMP90['Decrease'] & FAP90['Decrease'] & WHP90['Decrease'], FCI90['Low'])
rule34  = ctrl.Rule(BFPD90['Decrease'] & AMP90['Decrease'] & FAP90['Decrease'] & WHP90['Increase'], FCI90['Low'])
rule35  = ctrl.Rule(BFPD90['Decrease'] & AMP90['Decrease'] & FAP90['Increase'] & WHP90['Decrease'], FCI90['Low'])
rule36  = ctrl.Rule(BFPD90['Decrease'] & AMP90['Decrease'] & FAP90['Increase'] & WHP90['Increase'], FCI90['Low'])
rule37  = ctrl.Rule(BFPD90['Decrease'] & AMP90['Increase'] & FAP90['Decrease'] & WHP90['Decrease'], FCI90['Low'])
rule38  = ctrl.Rule(BFPD90['Decrease'] & AMP90['Increase'] & FAP90['Decrease'] & WHP90['Increase'], FCI90['Low'])
rule39  = ctrl.Rule(BFPD90['Decrease'] & AMP90['Increase'] & FAP90['Increase'] & WHP90['Decrease'], FCI90['Low'])
rule40  = ctrl.Rule(BFPD90['Decrease'] & AMP90['Increase'] & FAP90['Increase'] & WHP90['Increase'], FCI90['Low'])
rule41  = ctrl.Rule(BFPD90['Increase'] & AMP90['Decrease'] & FAP90['Decrease'] & WHP90['Decrease'], FCI90['High'])
rule42 = ctrl.Rule(BFPD90['Increase'] & AMP90['Decrease'] & FAP90['Decrease'] & WHP90['Increase'], FCI90['High'])
rule43 = ctrl.Rule(BFPD90['Increase'] & AMP90['Decrease'] & FAP90['Increase'] & WHP90['Decrease'], FCI90['High'])
rule44 = ctrl.Rule(BFPD90['Increase'] & AMP90['Decrease'] & FAP90['Increase'] & WHP90['Increase'], FCI90['High'])
rule45 = ctrl.Rule(BFPD90['Increase'] & AMP90['Increase'] & FAP90['Decrease'] & WHP90['Decrease'], FCI90['High'])
rule46 = ctrl.Rule(BFPD90['Increase'] & AMP90['Increase'] & FAP90['Decrease'] & WHP90['Increase'], FCI90['High'])
rule47 = ctrl.Rule(BFPD90['Increase'] & AMP90['Increase'] & FAP90['Increase'] & WHP90['Decrease'], FCI90['High'])
rule48 = ctrl.Rule(BFPD90['Increase'] & AMP90['Increase'] & FAP90['Increase'] & WHP90['Increase'], FCI90['High'])
# 180 Days
BFPD180   = ctrl.Antecedent(np.arange(-1,1.05,0.05), 'BFPD180')
AMP180    = ctrl.Antecedent(np.arange(-1,1.05,0.05), 'AMP180')
FAP180    = ctrl.Antecedent(np.arange(-1,1.05,0.05), 'FAP180')
WHP180    = ctrl.Antecedent(np.arange(-1,1.05,0.05), 'WHP180')
FCI180    = ctrl.Consequent(np.arange(-1,1.05,0.05), 'FCI180')
BFPD180['Decrease'] = fuzz.trimf(BFPD180.universe,[-1, -1, 0.03])
BFPD180['Increase'] = fuzz.trimf(BFPD180.universe,[-0.03, 1, 1])
AMP180['Decrease']  = fuzz.trimf(AMP180.universe,[-1, -1, 0.03])
AMP180['Increase']  = fuzz.trimf(AMP180.universe,[-0.03, 1, 1])
FAP180['Decrease']  = fuzz.trimf(FAP180.universe,[-1, -1, 0.03])
FAP180['Increase']  = fuzz.trimf(FAP180.universe,[-0.03, 1, 1])
WHP180['Decrease']  = fuzz.trimf(WHP180.universe,[-1, -1, 0.03])
WHP180['Increase']  = fuzz.trimf(WHP180.universe,[-0.03, 1, 1])
FCI180['Low'] = fuzz.trimf(FCI180.universe, [-1, -1, 0.03])
FCI180['High'] = fuzz.trimf(FCI180.universe, [-0.03, 1, 1])
rule49  = ctrl.Rule(BFPD180['Decrease'] & AMP180['Decrease'] & FAP180['Decrease'] & WHP180['Decrease'], FCI180['Low'])
rule50  = ctrl.Rule(BFPD180['Decrease'] & AMP180['Decrease'] & FAP180['Decrease'] & WHP180['Increase'], FCI180['Low'])
rule51  = ctrl.Rule(BFPD180['Decrease'] & AMP180['Decrease'] & FAP180['Increase'] & WHP180['Decrease'], FCI180['Low'])
rule52  = ctrl.Rule(BFPD180['Decrease'] & AMP180['Decrease'] & FAP180['Increase'] & WHP180['Increase'], FCI180['Low'])
rule53  = ctrl.Rule(BFPD180['Decrease'] & AMP180['Increase'] & FAP180['Decrease'] & WHP180['Decrease'], FCI180['Low'])
rule54  = ctrl.Rule(BFPD180['Decrease'] & AMP180['Increase'] & FAP180['Decrease'] & WHP180['Increase'], FCI180['Low'])
rule55  = ctrl.Rule(BFPD180['Decrease'] & AMP180['Increase'] & FAP180['Increase'] & WHP180['Decrease'], FCI180['Low'])
rule56  = ctrl.Rule(BFPD180['Decrease'] & AMP180['Increase'] & FAP180['Increase'] & WHP180['Increase'], FCI180['Low'])
rule57  = ctrl.Rule(BFPD180['Increase'] & AMP180['Decrease'] & FAP180['Decrease'] & WHP180['Decrease'], FCI180['High'])
rule58  = ctrl.Rule(BFPD180['Increase'] & AMP180['Decrease'] & FAP180['Decrease'] & WHP180['Increase'], FCI180['High'])
rule59  = ctrl.Rule(BFPD180['Increase'] & AMP180['Decrease'] & FAP180['Increase'] & WHP180['Decrease'], FCI180['High'])
rule60  = ctrl.Rule(BFPD180['Increase'] & AMP180['Decrease'] & FAP180['Increase'] & WHP180['Increase'], FCI180['High'])
rule61  = ctrl.Rule(BFPD180['Increase'] & AMP180['Increase'] & FAP180['Decrease'] & WHP180['Decrease'], FCI180['High'])
rule62  = ctrl.Rule(BFPD180['Increase'] & AMP180['Increase'] & FAP180['Decrease'] & WHP180['Increase'], FCI180['High'])
rule63  = ctrl.Rule(BFPD180['Increase'] & AMP180['Increase'] & FAP180['Increase'] & WHP180['Decrease'], FCI180['High'])
rule64  = ctrl.Rule(BFPD180['Increase'] & AMP180['Increase'] & FAP180['Increase'] & WHP180['Increase'], FCI180['High'])
FCIindex30_ctrl  = ctrl.ControlSystem([rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14,rule15,rule16])
FCIindex60_ctrl  = ctrl.ControlSystem([rule17,rule18,rule19,rule20,rule21,rule22,rule23,rule24,rule25,rule26,rule27,rule28,rule29,rule30,rule31,rule32])
FCIindex90_ctrl  = ctrl.ControlSystem([rule33,rule34,rule35,rule36,rule37,rule38,rule39,rule40,rule41,rule42,rule43,rule44,rule45,rule46,rule47,rule48])
FCIindex180_ctrl = ctrl.ControlSystem([rule49,rule50,rule51,rule52,rule53,rule54,rule55,rule56,rule57,rule58,rule59,rule60,rule61,rule62,rule63,rule64])
FCIindex30  = ctrl.ControlSystemSimulation(FCIindex30_ctrl)
FCIindex60  = ctrl.ControlSystemSimulation(FCIindex60_ctrl)
FCIindex90  = ctrl.ControlSystemSimulation(FCIindex90_ctrl)
FCIindex180 = ctrl.ControlSystemSimulation(FCIindex180_ctrl)
#FUZZY_DATA  = FUZZY_DATA.fillna(0)
FUZZY_DATA["FCIindex30"]  = FUZZY_DATA["BFPD30"]*0
FUZZY_DATA["FCIindex60"]  = FUZZY_DATA["BFPD30"]*0
FUZZY_DATA["FCIindex90"]  = FUZZY_DATA["BFPD30"]*0
FUZZY_DATA["FCIindex180"] = FUZZY_DATA["BFPD30"]*0
FUZZY_DATA = FUZZY_DATA[~FUZZY_DATA.index.duplicated(keep='first')]
for i in (FUZZY_DATA.index.values):
    FCIindex30.input['BFPD30']   = FUZZY_DATA['BFPD30'][i]
    FCIindex30.input['AMP30']    = FUZZY_DATA['AMP30'][i]
    FCIindex30.input['FAP30']    = FUZZY_DATA['FAP30'][i]
    FCIindex30.input['WHP30']    = FUZZY_DATA['WHP30'][i]
    #
    FCIindex60.input['BFPD60']   = FUZZY_DATA['BFPD60'][i]
    FCIindex60.input['AMP60']    = FUZZY_DATA['AMP60'][i]
    FCIindex60.input['FAP60']    = FUZZY_DATA['FAP60'][i]
    FCIindex60.input['WHP60']    = FUZZY_DATA['WHP60'][i]
    #
    FCIindex90.input['BFPD90']   = FUZZY_DATA['BFPD90'][i]
    FCIindex90.input['AMP90']    = FUZZY_DATA['AMP90'][i]
    FCIindex90.input['FAP90']    = FUZZY_DATA['FAP90'][i]
    FCIindex90.input['WHP90']    = FUZZY_DATA['WHP90'][i]
    #
    FCIindex180.input['BFPD180'] = FUZZY_DATA['BFPD180'][i]
    FCIindex180.input['AMP180']  = FUZZY_DATA['AMP180'][i]
    FCIindex180.input['FAP180']  = FUZZY_DATA['FAP180'][i]
    FCIindex180.input['WHP180']  = FUZZY_DATA['WHP180'][i]
    #
    FCIindex30.compute()
    FCIindex60.compute()
    FCIindex90.compute()
    FCIindex180.compute()
    #
    FUZZY_DATA["FCIindex30"][i]  = FCIindex30.output["FCI30"]
    FUZZY_DATA["FCIindex60"][i]  = FCIindex60.output["FCI60"]
    FUZZY_DATA["FCIindex90"][i]  = FCIindex90.output["FCI90"]
    FUZZY_DATA["FCIindex180"][i] = FCIindex180.output["FCI180"]
FUZZY_DATA
###
FCI_Only = FUZZY_DATA.iloc[:,16:21]
FCI_Only = FCI_Only[(FCI_Only["FCIindex30"]<0)&(FCI_Only["FCIindex60"]<0)&(FCI_Only["FCIindex90"]<0)&(FCI_Only["FCIindex180"]<0)]
FCI_Only = FCI_Only.sort_values(["FCIindex30","FCIindex60","FCIindex90","FCIindex180"],ascending=True)
FCI_Only
table = pd.DataFrame(FCI_Only)
#from matplotlib.pyplot import figure
#from sklearn.metrics import r2_score
#import pylab 
#import linear.regression 
FCI_table = FCI_Only.T.copy()
FCI_table = FCI_table.reset_index()
FCI_table = FCI_table.drop(["index"],axis=1)
FCI_Only["b_1"]=FCI_Only.FCIindex30*0
FCI_Only["b_0"]=FCI_Only.FCIindex30*0

for i in (FCI_Only.index):    
    if ((FUZZY_DATA['AMP30']["%s"%str(i)]<0) & (FUZZY_DATA['BFPD30']["%s"%str(i)]<0) & (FUZZY_DATA['FAP30']["%s"%str(i)]>0)):
        FCI_Only["FCIindex30"]["%s"%str(i)] = (FCI_Only["FCIindex30"]["%s"%str(i)]/abs(FCI_Only["FCIindex30"]["%s"%str(i)]))*abs(FCI_Only["FCIindex30"]["%s"%str(i)]*3*FUZZY_DATA['AMP30']["%s"%str(i)])**0.2
for i in (FCI_Only.index):
    if ((FUZZY_DATA['AMP60']["%s"%str(i)]<0) & (FUZZY_DATA['BFPD60']["%s"%str(i)]<0) & (FUZZY_DATA['FAP60']["%s"%str(i)]>0)):
        FCI_Only["FCIindex60"]["%s"%str(i)] = (FCI_Only["FCIindex60"]["%s"%str(i)]/abs(FCI_Only["FCIindex60"]["%s"%str(i)]))*abs(FCI_Only["FCIindex60"]["%s"%str(i)]*3*FUZZY_DATA['AMP60']["%s"%str(i)])**0.2
for i in (FCI_Only.index):
    if ((FUZZY_DATA['AMP90']["%s"%str(i)]<0) & (FUZZY_DATA['BFPD90']["%s"%str(i)]<0) & (FUZZY_DATA['FAP90']["%s"%str(i)]>0)):
        FCI_Only["FCIindex90"]["%s"%str(i)] = (FCI_Only["FCIindex90"]["%s"%str(i)]/abs(FCI_Only["FCIindex90"]["%s"%str(i)]))*abs(FCI_Only["FCIindex90"]["%s"%str(i)]*3*FUZZY_DATA['AMP90']["%s"%str(i)])**0.2
for i in (FCI_Only.index):    
    if ((FUZZY_DATA['AMP180']["%s"%str(i)]<0) & (FUZZY_DATA['BFPD180']["%s"%str(i)]<0) & (FUZZY_DATA['FAP180']["%s"%str(i)]>0)):
        FCI_Only["FCIindex180"]["%s"%str(i)] = (FCI_Only["FCIindex180"]["%s"%str(i)]/abs(FCI_Only["FCIindex180"]["%s"%str(i)]))*abs(FCI_Only["FCIindex180"]["%s"%str(i)]*3*FUZZY_DATA['AMP180']["%s"%str(i)])**0.2



for i in FCI_table.columns.values:
#    figure(num=None, figsize=(4, 3), dpi=80, facecolor='w', edgecolor='k')
    #plt.subplot(412)
#    plt.title('FCI')
#    plt.plot(FCI_table[i])
#    plt.legend(loc='lower right',fontsize=8)
    x = FCI_table.index
    y = FCI_table.loc[:,i]
#    plt.scatter(x, y)
    z = np.polyfit(x, y, deg=1)
    p = np.poly1d(z)
    # mean of x and y vector 
    n = np.size(x.values)
    m_x, m_y = np.mean(x.values), np.mean(y.values) 
    # calculating cross-deviation and deviation about x 
    SS_xy = np.sum(y*x) - n*m_y*m_x 
    SS_xx = np.sum(x.values*x.values) - n*m_x*m_x 
    # calculating regression coefficients 
    b_1 = SS_xy / SS_xx   # slope
    b_0 = m_y - b_1*m_x   # y-intercept
    FCI_Only.loc[i,"b_1"]=b_1
    FCI_Only.loc[i,"b_0"]=b_0
#    print("Estimated coefficients well:\nb_0 = "+str(b_0)+"\nb_1 = "+str(b_1))
    #print("Estimated coefficients Well"+str(FCI_table.loc[:,i])+":\nb_0 = "+str(b_0)+"\nb_1 = "+str(b_1))
    #print(b_1)
    #print(b_0)
#    plt.plot(x,p(x),"b--")
#    plt.show()
FCI_Only
FCI_Final = FCI_Only.copy()
FCI_Final = FCI_Final.sort_values(["b_1"],ascending=False)
FCI_Final["Status"]=FCI_Final["FCIindex30"]*0
#FCI_dfx = dfx.copy()
for i in FCI_Final.index.values:
    if FCI_Final.loc[i,"FCIindex30"]<FCI_Final.loc[i,"FCIindex60"]<FCI_Final.loc[i,"FCIindex90"]<FCI_Final.loc[i,"FCIindex180"]:
        FCI_Final.Status[i]=1
FCI_Final["Status"]
###
## All with negative FCI
#FCI_Final
conditions = [(FCI_Final['b_1']>=0)]
then = [abs(FCI_Final['FCIindex30'])]
FCI_Final['ABS_FCI'] = np.select(conditions, then, default=abs(FCI_Final['FCIindex180'])) 

for i in FCI_Final.index.values:
    if (FCI_Final.loc[i,"FCIindex30"]<=-0.1)|(FCI_Final.loc[i,"FCIindex60"]<=-0.1):
        FCI_Final["ABS_FCI"][i] = abs(FCI_Final.loc["%s"%str(i),"FCIindex30":"FCIindex180"]).max()

FCI_Final = FCI_Final.sort_values(["ABS_FCI"],ascending=False)
FCI_Final
##### ............END OF PROGRAM.........#####
#IODSC_SOR : uzIBceuBjwfDl_2
#connection = cx_Oracle.connect('IODSC_SOR', 'devsor@!!#!iodsc$2018', 'oil3rbid')
#connection = cx_Oracle.connect('IODSC_SOR', 'S0R#n4H#21$Be0Cy', 'oil4drip')
connection = cx_Oracle.connect('IODSC_SOR', 'uzIBceuBjwfDl_2', 'oil4rknd')
cur = connection.cursor()

i = FCI_Final.shape[0]
j = FCI_Final.shape[1]
print(i,j)
a = i/100
b = i%100
idxrow = -1
for x in range(int(a+1)):
    if x == int(a):
        c = b
    else:
        c = 100
    sqlunion = ""
    for y in range(c-1):
        idxrow = idxrow+1
        sqlunion = sqlunion + "SELECT "
        sqlunion = sqlunion + "'" + str(FCI_Final.index[idxrow]) + "'" + " UWI, "
        sqlunion = sqlunion + str(FCI_Final['FCIindex30'][idxrow]) + " FCI_INDEX30, "
        sqlunion = sqlunion + str(FCI_Final['FCIindex60'][idxrow]) + " FCI_INDEX60, "
        sqlunion = sqlunion + str(FCI_Final['FCIindex90'][idxrow]) + " FCI_INDEX90, "
        sqlunion = sqlunion + str(FCI_Final['FCIindex180'][idxrow]) + " FCI_INDEX180, "
        sqlunion = sqlunion + str(FCI_Final['b_1'][idxrow]) + " B_1, "
        sqlunion = sqlunion + str(FCI_Final['b_0'][idxrow]) + " B_0, "
        sqlunion = sqlunion + str(FCI_Final['Status'][idxrow]) + " STATUS, "
        sqlunion = sqlunion + str(FCI_Final['ABS_FCI'][idxrow]) + " ABS_FCI, "
        sqlunion = sqlunion + "1 MODEL_VERSION, SYSDATE CREATED_DATE, 'SYSTEM' CREATED_BY"
        sqlunion = sqlunion + " from DUAL"
        if y == c-2:
            sqlunion = sqlunion
        else:
            sqlunion = sqlunion + "\n" + "UNION ALL" + "\n"
    sqlunion = "INSERT INTO AI_ADVANCE_ESP \n(" + sqlunion + ")"
    print(sqlunion)
    cur.execute(sqlunion)
    cur.execute("COMMIT")
cur.close()
connection.close()